grades
midterm<-as.data.frame(cbind(class,grades))
midterm
midterm$grades<-as.numeric(midterm$grades)
midterm
gradesam<-c(98,49,83,96,99,81,89,87,94,76,65,78,91,82,82,100)
mean(gradesam)
range(gradesam)
100-49
median(gradesam)
sd(gradesam)
histogram(gradesam)
histo(gradesam)
hist(gradesam)
gradespm<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
grades<-as.data.frame(gradespm)
grades
ggplot(grades,aes(x = gradespm)) + geom_density()
library(ggplot2)
ggplot(grades,aes(x = gradespm)) + geom_density()
grades<- as.data.frame(c(gradesam,gradespm))
ggplot(grades,aes(x = gradespm)) + geom_density()
grades<- c(gradesam,gradespm)
total <- as.data.frame(grades)
ggplot(data=total,aes(x=grades)) +geom_density()
x <- as.vector(rnorm(10000))
d <- as.data.frame(x=x)
library(ggplot2)
p <- ggplot(data = d) + theme_bw() +
geom_density(aes(x=x, y = ..density..), color = 'black')
# new code is below
q5 <- quantile(x,.05)
q95 <- quantile(x,.95)
medx <- median(x)
x.dens <- density(x)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
p + geom_area(data = subset(df.dens, x >= q5 & x <= q95),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
v <- ggplot(data = total) + theme_bw()+
geom_density(aes(x=grades, y = ..density..), color = 'black')
v
q5 <- quantile(grades,.05)
q95 <- quantile(grades,.95)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q5 & x <= q95),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
q10 <- quantile(grades,.10)
q90 <- quantile(grades,.90)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q10 & x <= q90),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
q125 <- quantile(grades,.125)
q875 <- quantile(grades,.875)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
v+geom_area(data = subset(df.dens, x >= q5 & x <= q95),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
ggplot(data=total,aes(x=grades)) +geom_density(aes(fill = '#ff0000'))
v <- ggplot(data = total) + theme_bw()+
geom_density(aes(x=grades, y = ..density..), color = 'black')
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, aes(fill = '#ff0000'))
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, aes(colour = '#ff0000'))
geom_vline(xintercept = 84.275, coulour = 'blue' aes(colour = '#ff0000'))
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, coulour = 'blue' )
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, aes(coulour = 'blue') )
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
q10 <- quantile(grades,.10)
q1 <- quantile(grades,1)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q10 & x <= q1),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
gradespm<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
mean(gradespm)
median(gradespm)
sd(gradespm)
range(gradespm)
98-23
setwd(dir = '../sf_salaries/')
library(dplyr)
library(RSQLite)
library(tidyr)
library(ggplot2)
library(readr)
library(stringr)
library(scales)
library(mixtools)
library(gender)
list.files("output/")
setwd(dir = '../sf_salaries/')
library(dplyr)
library(RSQLite)
library(tidyr)
library(ggplot2)
library(readr)
library(stringr)
library(scales)
library(mixtools)
library(gender) # add
list.files("output/")
data_csv <- read_csv("output/Salaries.csv", na=c("Not Provided"))
setwd(dir = '../sf_salaries/')
setwd(dir = '../sf_salaries/')
wd
pwd
print(wd)
setwd(dir='Desktop/Spring 2016/Neander_Trauma/')
library(plyr)
library(ggplot2)
library(plotly)
library(reshape)
# read in the data
df <- read.csv('Data/NEISS/sport_category_final.csv')
# create a contigency table
orig_table <- table(df$prod1,df$body_part)
# create a datafame from the contigency table (at least one that is intuitive)
tm<-as.data.frame.matrix(orig_table) # tm stands for table matrix
# create new columns based on body part combinations
head_neck <- tm$face + tm$neck + tm$head
shoulder_arm <- tm$`upper arm` + tm$`lower arm` + tm$shoulder + tm$elbow
hand <- tm$hand + tm$finger + tm$wrist
pelvis <- tm$`pubic region` + tm$hip # look up Berger femoral neck categorization and within the data
leg <- tm$knee + tm$`lower leg` + tm$`upper leg`
foot <- tm$foot + tm$toe + tm$ankle
trunk <- tm$`upper trunk` + tm$back
# combine columns into a new dataframe
final<-as.data.frame(cbind(head_neck,shoulder_arm,hand,pelvis,leg,foot,trunk))
rownames(final)<-rownames(tm) # index will be the activity name
# recreate data from Berger Trinkaus papers
neander_tot<-c(8,4,7,1,1,3,3)
nea_wo_djd<-c(7,4,7,1,0,3,1)
nea_wo_shan1<-c(6,4,5,1,1,3,1)
nea_wo_shan1_djd<-c(5,4,5,1,0,3,0)
# apply chi square for neander total and every sport
nt<-t(apply(final,1,function(x) {
new<- cbind(neander_tot,x)
ch <- chisq.test(new)
c(unname(ch$statistic), ch$p.value)}))
nwd<-t(apply(final,1,function(x) {
new<- cbind(nea_wo_djd,x)
ch <- chisq.test(new)
c(unname(ch$statistic), ch$p.value)}))
nws<-t(apply(final,1,function(x) {
new<- cbind(nea_wo_shan1,x)
ch <- chisq.test(new)
c(unname(ch$statistic), ch$p.value)}))
nwsd<-t(apply(final,1,function(x) {
new<- cbind(nea_wo_shan1_djd,x)
ch <- chisq.test(new)
c(unname(ch$statistic), ch$p.value)}))
# create a function to cleanup the chi square tables and be able to pull out different objects from this cleanup
chi2cleanup<-function(table){
# read in one of the chi square tables (nt, nwd, nws or nwsd)
frame<-as.data.frame(table,row.names = rownames(table))
names(frame) = c('X2','P-Value')
fin = na.omit(frame)
# create two callable objects, 1) the rows that have NAs and 2) the final data frame for some final manipulation
c<- list(
rowna=frame[is.nan(frame$X2),],   # $rowna
final=fin,                        # $final
similar=fin[fin$`P-Value` > .05,] # $similar (activities that are similar, P > 0.05)
)
return(c)
}
# name cleaned up chi square tables
n_tot<-chi2cleanup(nt)  # neanderthal total
n_djd<-chi2cleanup(nwd) # neanderthal w/o djd
n_s<-chi2cleanup(nws)   # neanderthal w/o shan
n_sd<-chi2cleanup(nwsd) # neanderthal w/o shan or djd
# find similar activities per sample
n_tot$similar
n_djd$similar
n_s$similar
n_sd$similar
# create a function to find the similar activities frome the original contigency table
similarSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows)  # join rows from neanderthal sample to new dataframe
joined_cols = cbind(sample,joined_rows)       # add the "sample" column
rownames(joined_cols) = NULL                  # remove the row indices
melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(melted)
}
# an example of how similarSelector works
n<-similarSelector(n_tot,final,neander_tot)
d<-similarSelector(n_djd,final,nea_wo_djd)
s<-similarSelector(n_s,final,nea_wo_shan1)
sd<-similarSelector(n_sd,final,nea_wo_shan1_djd)
n
ggplot(n, aes(x = factor(sample), y= value)) + geom_bar(aes(colour=factor(variable)))
ggplot(n, aes(x = factor(sample), y= value)) + geom_bar()
g <- ggplot(n,aes(variable))
g+geom_bar()
g <- ggplot(n,aes(value))
g+geom_bar()
ggplot(data=n,
aes(x=factor(variable), y=value,
group=sample,
shape=sample,
color=sample)) +
geom_line() +
geom_point() +
opts(title =
"Proportion Tasty by Year, Quality, and Group") +
scale_x_discrete("Year") +
scale_y_continuous("Proportion Tasty") +
facet_grid(.~sample )
ggplot(data=n,
aes(x=factor(variable), y=value,
group=sample,
shape=sample,
color=sample)) +
geom_line() +
geom_point() +
scale_x_discrete("Year") +
scale_y_continuous("Proportion Tasty") +
facet_grid(.~sample )
ggplot(data=n,
aes(x=factor(variable), y=value,
group=sample,
shape=sample,
color=sample)) +
geom_line() +
geom_point() +
scale_x_discrete("Year") +
scale_y_continuous("Proportion Tasty")
ggplot(data=n,
aes(x=factor(variable), y=value,
group=sample,
color=sample)) +
geom_line() +
geom_point() +
scale_x_discrete("Year") +
scale_y_continuous("Proportion Tasty")
n_tot$similar
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows)  # join rows from neanderthal sample to new dataframe
joined_cols = cbind(sample,joined_rows)       # add the "sample" column
rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(joined_cols)
}
n<-simiSelector(n_tot,final,neander_tot)
n
prop.table(n)
prop.table(n[2:7])
prop.table(n[2:7],margins=1)
prop.table(n[2:7],margin=1)
prop.table(n[2:7,])
prop.table(n[,2:7])
?prop.table
prop.table(n[,2:7], 1)
prop.table(n[2:7], 1)
prop.table(n[2:7], 2)
prop.table(as.table(as.matrix(n[,-1])),1)
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
#joined_cols = cbind(sample,joined_rows)       # add the "sample" column
#rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(props)
}
n<-similarSelector(n_tot,final,neander_tot)
n<-simiSelector(n_tot,final,neander_tot)
n
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
joined_cols = cbind(sample,props)       # add the "sample" column
rownames(joined_cols) = NULL                  # remove the row indices
melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(props)
}
n<-simiSelector(n_tot,final,neander_tot)
n
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
joined_cols = cbind(sample,props)       # add the "sample" column
rownames(joined_cols) = NULL                  # remove the row indices
melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(melted)
}
n
n<-simiSelector(n_tot,final,neander_tot)
n
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
joined_cols = cbind(sample,props)       # add the "sample" column
rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(joined_cols)
}
n<-simiSelector(n_tot,final,neander_tot)
n
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
props<-as.data.frame(props)
joined_cols = cbind(sample,props)       # add the "sample" column
rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(joined_cols)
}
n<-simiSelector(n_tot,final,neander_tot)
n
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
props<-as.data.frame(props)
#joined_cols = cbind(sample,props)       # add the "sample" column
#rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(props)
}
n<-simiSelector(n_tot,final,neander_tot)
n
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
#props<-as.data.frame(props)
#joined_cols = cbind(sample,props)       # add the "sample" column
#rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(props)
}
n<-simiSelector(n_tot,final,neander_tot)
n
as.data.frame(n, row.names = NULL)
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
props<-as.data.frame(props)
props$Var1[props$Var1 == 1] <- 'neander_sample'
#joined_cols = cbind(sample,props)       # add the "sample" column
#rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(props)
}
n<-simiSelector(n_tot,final,neander_tot)
n
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
props<-as.data.frame(props)
props$Var1[props$Var1 == '1'] <- 'neander_sample'
#joined_cols = cbind(sample,props)       # add the "sample" column
#rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(props)
}
n<-simiSelector(n_tot,final,neander_tot)
n
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
props<-as.data.frame(props)
revalue(props, 1='neander')
#joined_cols = cbind(sample,props)       # add the "sample" column
#rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(props)
}
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
props<-as.data.frame(props)
revalue(props,'1'='neander')
#joined_cols = cbind(sample,props)       # add the "sample" column
#rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(props)
}
n<-simiSelector(n_tot,final,neander_tot)
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
require(plyr)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
props<-as.data.frame(props)
revalue(props,'1'='neander')
#joined_cols = cbind(sample,props)       # add the "sample" column
#rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(props)
}
n<-simiSelector(n_tot,final,neander_tot)
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
require(plyr)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
props<-as.data.frame(props)
revalue(props$Var1,1='neander')
#joined_cols = cbind(sample,props)       # add the "sample" column
#rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(props)
}
simiSelector<-function(frame,final_frame,neander_sample){
require(reshape)
require(plyr)
indices=rownames(frame$similar)               # find rows to set as indices
new_rows = final_frame[indices,]              # map those to original contigency table
sample =append("neander",rownames(new_rows))  # add a new vector to use a "sample" column
joined_rows = rbind(neander_sample,new_rows) # join rows from neanderthal sample to new dataframe
props = prop.table(as.table(as.matrix(joined_rows)),1)
props<-as.data.frame(props)
props$Var1[props$Var1=='1'] = 'neander'
#joined_cols = cbind(sample,props)       # add the "sample" column
#rownames(joined_cols) = NULL                  # remove the row indices
#melted <- melt(joined_cols, id=(c("sample"))) # transpose contigency table
return(props)
}
n<-simiSelector(n_tot,final,neander_tot)
