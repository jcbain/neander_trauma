qplot(displ,hwy,data=mpg ,color = class, geom = c('point','boxplot') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(reorder(class,hwy),class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(class,hwy), geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(hwy,class), geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(hwy,class), geom = 'boxplot' )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(mpg$hwy,mpg$class), geom = 'boxplot' )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
?reorder
qplot(reorder(hwy, FUN = median),class,hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = median),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = mean),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,-hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(hwy,data=mpg,binwidth = 1)
qplot(hwy,data=mpg,binwidth = 2)
qplot(hwy,data=mpg,binwidth = 1)
qplot(carat, data = diamonds)
qplot(depth, data = diamonds)
qplot(depth, data = diamonds, binwidth = .1)
qplot(depth, data = diamonds, binwidth = .2)
qplot(depth, data = diamonds, binwidth = .2,color = cut)
qplot(depth, data = diamonds, binwidth = .2,fill = cut)
qplot(depth, data = diamonds, binwidth = .2,color = 'blue')
qplot(depth, data = diamonds, binwidth = .2,color = i('blue'))
qplot(depth, data = diamonds, binwidth = .2,color = I('blue'))
qplot(depth, data = diamonds, binwidth = .2,color = I('green'))
qplot(depth, data = diamonds, binwidth = .2,color = I('green'),fill = I('red'))
qplot(depth, data = diamonds, binwidth = .2,color = I('white'),fill = I('black'))
qplot(depth, data = diamonds, binwidth = .2,color = I('black'),fill = I('white'))
qplot(data = economics, aes(date,unemploy)) + geom_line()
economics
qplot(data = economics, aes(x=date,y=unemploy)) + geom_line()
names(economics)
summary(economics)
qplot(economics, x=date,y=unemploy)
qplot(data=economics, x=date,y=unemploy)
qplot(data=economics, x=date,y=unemploy) + geom_line()
getwd()
pl<-qplot(data=economics, x=date,y=unemploy) + geom_line()
ggsave('Desktop/plot.pdf', plot= pl)
summary(diamonds)
ggplot(data = diamonds, aes(x = color)) + geom_bar(color = cut)
ggplot(data = diamonds, x=color + geom_bar(color = cut)
ggplot(data = diamonds, x=color) + geom_bar(color = cut)
ggplot(data = diamonds, x=color) + geom_bar(color = cut)
qplot(x = color, data = diamonds)
qplot(x = color, data = diamonds, color = cut)
qplot(x = color, data = diamonds, color = cut, position = 'stack')
qplot(x = color, data = diamonds, color = cut, position = 'dodge')
qplot(x = color, data = diamonds, color = cut) + position_dodge()
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='stack')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='identity')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='fill')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position=c('fill','dodge'))
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
install.packages('plotly')
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
(gg <- ggplotly(p))
gg
ggplotly(p)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity))) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
ggplotly(p)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
library(ggplot2)
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
names(diamonds)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = depth)
grades<-c(98,49,83,96,99,81,89,87,94,76,65,78,91,82,82,100)
mean(grades)
sd(grades)
hist(grades)
grades2<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
mean(grades2)
sd(grades2)
hist(grades2)
grades<-c(98,49,83,96,99,81,89,87,94,76,65,78,91,82,82,100)
gradesam<-c(98,49,83,96,99,81,89,87,94,76,65,78,91,82,82,100)
mean(gradesam)
mean(gradespm)
gradespm<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
mean(gradespm)
median(gradesam)
sd(gradesam)
sd(gradesam)^2
am<-rep('am',16)
pm<-rep('pm',length(gradespm))
am<-rep('am',length(gradesam))
class<- rbind(am,pm)
class<- c(am,pm)
class
grades<- c(gradesam,gradespm)
midterm<-cbind(class,grades)
midterm
midterm<-as.data.frame(cbind(class,grades))
midterm
ggplot(data=midterm,aes(x=grades, colour=class)) +geom_density()
library(ggplot2)
ggplot(data=midterm,aes(x=grades, colour=class)) +geom_density()
ggplot(data=midterm,aes(x=grades, colour=class)) +geom_hist()
ggplot(data=midterm,aes(x=grades, colour=class)) +geom_histogram()
ggplot(data=midterm,aes(x=grade)) +geom_density()
ggplot(data=midterm,aes(x=grades)) +geom_density()
ggplot(data=midterm,aes(x=grades)) +stat_density()
ggplot(data=midterm,aes(x=grades)) +stat_density(aes(colour=class))
ggplot(data=midterm,aes(grades)) +stat_density(aes(colour=class))
ggplot(data=midterm,aes(grades)) +stat_histogram(aes(colour=class))
ggplot(data=midterm,aes(grades)) +geom_histogram(aes(colour=class))
midterm$grades<-as.numeric(midterm$grades)
ggplot(data=midterm,aes(grades)) +geom_histogram(aes(colour=class))
ggplot(data=midterm,aes(grades)) +geom_density(aes(colour=class))
ggplot(data=midterm,aes(grades)) +geom_density()
ggplot(data=midterm,aes(grades)) +geom_histogram()
midterm
gradesam<-c(98,49,83,96,99,81,89,87,94,76,65,78,91,82,82,100)
am<-rep('am',length(gradesam))
gradespm<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
pm<-rep('pm',length(gradespm))
class<- c(am,pm)
grades<- c(gradesam,gradespm)
grades
midterm<-as.data.frame(cbind(class,grades))
midterm
midterm$grades<-as.numeric(midterm$grades)
midterm
gradesam<-c(98,49,83,96,99,81,89,87,94,76,65,78,91,82,82,100)
mean(gradesam)
range(gradesam)
100-49
median(gradesam)
sd(gradesam)
histogram(gradesam)
histo(gradesam)
hist(gradesam)
gradespm<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
grades<-as.data.frame(gradespm)
grades
ggplot(grades,aes(x = gradespm)) + geom_density()
library(ggplot2)
ggplot(grades,aes(x = gradespm)) + geom_density()
grades<- as.data.frame(c(gradesam,gradespm))
ggplot(grades,aes(x = gradespm)) + geom_density()
grades<- c(gradesam,gradespm)
total <- as.data.frame(grades)
ggplot(data=total,aes(x=grades)) +geom_density()
x <- as.vector(rnorm(10000))
d <- as.data.frame(x=x)
library(ggplot2)
p <- ggplot(data = d) + theme_bw() +
geom_density(aes(x=x, y = ..density..), color = 'black')
# new code is below
q5 <- quantile(x,.05)
q95 <- quantile(x,.95)
medx <- median(x)
x.dens <- density(x)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
p + geom_area(data = subset(df.dens, x >= q5 & x <= q95),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
v <- ggplot(data = total) + theme_bw()+
geom_density(aes(x=grades, y = ..density..), color = 'black')
v
q5 <- quantile(grades,.05)
q95 <- quantile(grades,.95)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q5 & x <= q95),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
q10 <- quantile(grades,.10)
q90 <- quantile(grades,.90)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q10 & x <= q90),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
q125 <- quantile(grades,.125)
q875 <- quantile(grades,.875)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
v+geom_area(data = subset(df.dens, x >= q5 & x <= q95),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
ggplot(data=total,aes(x=grades)) +geom_density(aes(fill = '#ff0000'))
v <- ggplot(data = total) + theme_bw()+
geom_density(aes(x=grades, y = ..density..), color = 'black')
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, aes(fill = '#ff0000'))
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, aes(colour = '#ff0000'))
geom_vline(xintercept = 84.275, coulour = 'blue' aes(colour = '#ff0000'))
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, coulour = 'blue' )
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, aes(coulour = 'blue') )
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
q10 <- quantile(grades,.10)
q1 <- quantile(grades,1)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q10 & x <= q1),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
gradespm<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
mean(gradespm)
median(gradespm)
sd(gradespm)
range(gradespm)
98-23
setwd(dir='Desktop/Spring 2016/Neander_Trauma/')
library(plyr)
# read in the data
df <- read.csv('Data/NEISS/sport_category_final.csv')
# create a contigency table
orig_table <- table(df$prod1,df$body_part)
# create a datafame from the contigency table (at least one that is intuitive)
tm<-as.data.frame.matrix(orig_table) # tm stands for table matrix
# create new columns based on body part combinations
head_neck <- tm$face + tm$neck + tm$head
shoulder_arm <- tm$`upper arm` + tm$`lower arm` + tm$shoulder + tm$elbow
hand <- tm$hand + tm$finger + tm$wrist
pelvis <- tm$`pubic region` + tm$hip # look up Berger femoral neck categorization and within the data
leg <- tm$knee + tm$`lower leg` + tm$`upper leg`
foot <- tm$foot + tm$toe + tm$ankle
trunk <- tm$`upper trunk` + tm$back
# combine columns into a new dataframe
final<-as.data.frame(cbind(head_neck,shoulder_arm,hand,pelvis,leg,foot,trunk))
rownames(final)<-rownames(tm) # index will be the activity name
# recreate data from Berger Trinkaus papers
neander_tot<-c(8,4,7,1,1,3,3)
nea_wo_djd<-c(7,4,7,1,0,3,1)
nea_wo_shan1<-c(6,4,5,1,1,3,1)
nea_wo_shan1_djd<-c(5,4,5,1,0,3,0)
# create a function to cleanup the chi square tables and be able to pull out different objects from this cleanup
chi2cleanup<-function(table){
# read in one of the chi square tables (nt, nwd, nws or nwsd)
frame<-as.data.frame(table,row.names = rownames(table))
names(frame) = c('X2','P-Value')
fin = na.omit(frame)
# create two callable objects, 1) the rows that have NAs and 2) the final data frame for some final manipulation
c<- list(
rowna=frame[is.nan(frame$X2),],   # $rowna
final=fin,                        # $final
similar=fin[fin$`P-Value` > .05,] # $similar (activities that are similar, P > 0.05)
)
return(c)
}
# name cleaned up chi square tables
n_tot<-chi2cleanup(nt)  # neanderthal total
n_djd<-chi2cleanup(nwd) # neanderthal w/o djd
n_s<-chi2cleanup(nws)   # neanderthal w/o shan
n_sd<-chi2cleanup(nwsd) # neanderthal w/o shan or djd
# find similar activities per sample
n_tot$similar
n_djd$similar
n_s$similar
n_sd$similar
setwd(dir='Desktop/Spring 2016/Neander_Trauma/')
library(plyr)
# read in the data
df <- read.csv('Data/NEISS/sport_category_final.csv')
# create a contigency table
orig_table <- table(df$prod1,df$body_part)
# create a datafame from the contigency table (at least one that is intuitive)
tm<-as.data.frame.matrix(orig_table) # tm stands for table matrix
# create new columns based on body part combinations
head_neck <- tm$face + tm$neck + tm$head
shoulder_arm <- tm$`upper arm` + tm$`lower arm` + tm$shoulder + tm$elbow
hand <- tm$hand + tm$finger + tm$wrist
pelvis <- tm$`pubic region` + tm$hip # look up Berger femoral neck categorization and within the data
leg <- tm$knee + tm$`lower leg` + tm$`upper leg`
foot <- tm$foot + tm$toe + tm$ankle
trunk <- tm$`upper trunk` + tm$back
# combine columns into a new dataframe
final<-as.data.frame(cbind(head_neck,shoulder_arm,hand,pelvis,leg,foot,trunk))
rownames(final)<-rownames(tm) # index will be the activity name
# recreate data from Berger Trinkaus papers
neander_tot<-c(8,4,7,1,1,3,3)
nea_wo_djd<-c(7,4,7,1,0,3,1)
nea_wo_shan1<-c(6,4,5,1,1,3,1)
nea_wo_shan1_djd<-c(5,4,5,1,0,3,0)
# apply chi square for neander total and every sport
nt<-t(apply(final,1,function(x) {
new<- cbind(neander_tot,x)
ch <- chisq.test(new)
c(unname(ch$statistic), ch$p.value)}))
nwd<-t(apply(final,1,function(x) {
new<- cbind(nea_wo_djd,x)
ch <- chisq.test(new)
c(unname(ch$statistic), ch$p.value)}))
nws<-t(apply(final,1,function(x) {
new<- cbind(nea_wo_shan1,x)
ch <- chisq.test(new)
c(unname(ch$statistic), ch$p.value)}))
nwsd<-t(apply(final,1,function(x) {
new<- cbind(nea_wo_shan1_djd,x)
ch <- chisq.test(new)
c(unname(ch$statistic), ch$p.value)}))
# create a function to cleanup the chi square tables and be able to pull out different objects from this cleanup
chi2cleanup<-function(table){
# read in one of the chi square tables (nt, nwd, nws or nwsd)
frame<-as.data.frame(table,row.names = rownames(table))
names(frame) = c('X2','P-Value')
fin = na.omit(frame)
# create two callable objects, 1) the rows that have NAs and 2) the final data frame for some final manipulation
c<- list(
rowna=frame[is.nan(frame$X2),],   # $rowna
final=fin,                        # $final
similar=fin[fin$`P-Value` > .05,] # $similar (activities that are similar, P > 0.05)
)
return(c)
}
# name cleaned up chi square tables
n_tot<-chi2cleanup(nt)  # neanderthal total
n_djd<-chi2cleanup(nwd) # neanderthal w/o djd
n_s<-chi2cleanup(nws)   # neanderthal w/o shan
n_sd<-chi2cleanup(nwsd) # neanderthal w/o shan or djd
# find similar activities per sample
n_tot$similar
n_djd$similar
n_s$similar
n_sd$similar
library(ggplot2)
library(plotly)
n_tot$similar
final == n_tot$similar
total[1]
final[1]
final[1,]
final['acrobatics/gymnastics',]
final['wrestling',]
for(i in n_tot$similar){
for(j in final){
if(j == i){
return(i)
}
}
}
harg<-function(){
for(i in n_tot$similar){
for(j in final){
if(j == i){
return(i)
}
}
}}
barg <-harg()
bar
barg
return(i)
for(i in n_tot$similar){
return(i)
}
for(i in n_tot$similar){
print(i)
}
for(i in n_tot$similar){
print(n_tot$similar[i,])
}
for(i in n_tot$similar){
print(n_tot$similar[i,1])
}
for(i in n_tot$similar){
print(n_tot$similar[i,0])
}
for(i in n_tot$similar){
print(rowname(i))
}
for(i in n_tot$similar){
print(row.name(i))
}
for(i in  rownames(n_tot$similar)){
print(i)
}
for(i in  rownames(n_tot$similar)){
for(j in total){
if(rownames(j)==i){
return(j)
}
}
}
for(i in  rownames(n_tot$similar)){
for(j in final){
if(rownames(j)==i){
return(j)
}
}
}
indices<-rownames(n_tot$similar)
final[indices]
final[indices,]
similarSelector<-function(frame,final_frame){
indices=rownames(frame$similar)
return(final_frame[indices,])
}
similarSelector(n_tot,final)
similarSelector<-function(frame,final_frame,neander_sample){
indices=rownames(frame$similar)
new_rows = final_frame[indices,]
return(rbind(neander_sample,new_rows))
}
similarSelector(n_tot,final,neander_tot)
# create a function to find the similar activities frome the original contigency table
similarSelector<-function(frame,final_frame,neander_sample){
indices=rownames(frame$similar)
new_rows = final_frame[indices,]
joined = rbind(neander_sample,new_rows)
rownames(joined[1,]) = 'neanderthal'
}
# create a function to find the similar activities frome the original contigency table
similarSelector<-function(frame,final_frame,neander_sample){
indices=rownames(frame$similar)
new_rows = final_frame[indices,]
joined = rbind(neander_sample,new_rows)
rownames(joined[1,]) = 'neanderthal'
return(joined)
}
similarSelector(n_tot,final,neander_tot)
# create a function to find the similar activities frome the original contigency table
similarSelector<-function(frame,final_frame,neander_sample){
indices=rownames(frame$similar)
new_rows = final_frame[indices,]
joined = rbind(neander_sample,new_rows)
rownames(joined[1]) = 'neanderthal'
return(joined)
}
similarSelector(n_tot,final,neander_tot)
# create a function to find the similar activities frome the original contigency table
similarSelector<-function(frame,final_frame,neander_sample){
indices=rownames(frame$similar)
new_rows = final_frame[indices,]
joined = rbind(neander_sample,new_rows)
return(joined)
}
similarSelector(n_tot,final,neander_tot)
joined
r<-similarSelector(n_tot,final,neander_tot)
r$joined
r
r[1]
r[1,]
rownames(r[1])
rownames(r[,1])
rownames(r[1,])
rownames(r[1])
rownames(r[,1])
r[,1]
r[1,]
# create a function to find the similar activities frome the original contigency table
similarSelector<-function(frame,final_frame,neander_sample){
indices=rownames(frame$similar)
new_rows = final_frame[indices,]
joined = rbind(neander_sample,new_rows)
rownames(joined[1,]) = 'neanderthal'
return(joined)
}
r<-similarSelector(n_tot,final,neander_tot)
r
# create a function to find the similar activities frome the original contigency table
similarSelector<-function(frame,final_frame,neander_sample){
indices=rownames(frame$similar)
new_rows = final_frame[indices,]
joined = rbind(neander_sample,new_rows)
return(joined)
}
