median(fat)
sd(age2)
sd(fat)
x<-cbind(age2,fat)
x<-data.frame(x)
boxplot(age2)
boxplot(age2,title='age')
boxplot(age2,title(main = 'age'))
boxplot(age2)
title(main='age')
boxplot(fat)
title(main='fat_perc')
p <- ggplot(x, aes(age2, fat))
p + geom_point()
p + geom_point() + xlab('age') + ylab('fat_perc')
p + geom_point() + xlab('age') + ylab('fat_perc') +ggtitle('scatter')
qqline(x$age2,x$fat)
qqplot(x$age2,x$fat,xlab = 'age', ylab= 'fat_perc',title(main='Quantile Quantile Plot'))
qqplot(x$age2,x$fat,xlab = 'age', ylab= 'fat_perc',title(main='Quantile Quantile Plot'))
x<-data.frame(x)
qqplot(x$age2,x$fat,xlab = 'age', ylab= 'fat_perc',title(main='Quantile Quantile Plot'))
qqplot(x$age2,x$fat,xlab = 'age', ylab= 'fat_perc')
title(main='quantile quantile plot')
zscore_age<- scale(x$age2, center = TRUE, scale = TRUE)
zscore_age
cbind(zscore_age,zscore_fat)
cor(x$age2,x$fat)
gulf <- c(1500,6800,1700)
parfreq<- gulf/sum(gulf)
parfreq
p<-parfreq[1]
p<-parfreq[1]+(.5*parfreq[2])
q<-parfreq[3]+(.5*parfreq[2])
p^2
2*p*q
q^2
p2<-p^2
pq2<-2*p*q
q2<-q^2
expected<-(p2,pq2,p2)
expected<-c(p2,pq2,p2)
ecount<-expect*sum(gulf)
ecount<-expected*sum(gulf)
((gulf-ecount)^2)/ecount
sum(val)
val<-((gulf-ecount)^2)/ecount
sum(val)
gulf <- c(1500,6800,1700)
parfreq<- gulf/sum(gulf)
parfreq
p<-parfreq[1]+(.5*parfreq[2])
q<-parfreq[3]+(.5*parfreq[2])
p2<-p^2
pq2<-2*p*q
q2<-q^2
expected<-c(p2,pq2,p2)
ecount<-expected*sum(gulf)
val<-((gulf-ecount)^2)/ecount
sum(val)
ecount
help.start()
require(ggplot2)
attach(diamands)
attach(diamonds)
qlot(price, data = diamonds, geo = "density", color = "cut")
qplot(price, data = diamonds, geo = "density", color = "cut")
qplot(cara,price,data=diamonds)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,geom= "heatmap"
)
qplot(carat,price,data=diamonds, color = blue)
qplot(carat,price,data=diamonds, color = "blue")
qplot(data, unemploy, data=economics)
log(1/2)
log(.5)
(-2/5)*log(2/5)
(-3/5)*log(3/5)
(-2/5)*log(2/5)+(-3/5)*log(3/5)
log(2/5)
-0.9162907*(-2/5)
log(2/5,base =2)
log(2/5,base =1)
log(2/5,base =3)
log(2/5,base =2)
-1.321928*(2/5)
-1.321928*(-2/5)
(-2/5)*log(2/5,base=2)+((-3/5)*log(3/5,base=2))
log(1,base=2)
2^0
log(0,base=2)
AA<- 100/350
Aa<- 150/350
aa<- 100/350
AA
aa
Aa
p<- AA + (.5*Aa)
q<- aa + (.5*Aa)
p
q
AA<- 20/100
Aa<- 35/100
aa<- 45/100
p<- AA + (.5*Aa)
q<- aa + (.5*Aa)
p
q
p^2
2*p*q
q^2
p^2+(2*p*q)=q^2
p^2+(2*p*q)+q^2
sqqrt(.81)
sqrt(.81)
.55^2
2*.55*.45
.45^2
0.3025+0.495+0.2025
.5^10
setwd(dir = "Desktop/Spring 2FALSETRUE6/Data Mining/Assignments/")
library(arules)
library(arulesViz)
library(arulesViz)
data <- paste(
"# this is some test data",
"M, O, N, K, E, Y",
"D, O, N, K, E, Y",
"M, A, K, E",
"M, U, C, K, Y",
"C, O, O, K, I, E",
sep="\n")
cat(data)
write(data, file = "demo_basket")
tr <- read.transactions("demo_basket", format = "basket", sep=",", skip = 1,  rm.duplicates = TRUE)
inspect(tr)
rules <- apriori(tr, parameter= list(supp=0.6, conf=0.8))
inspect(rules)
data
cat(data)
## read demo data (skip comment line)
tr <- read.transactions("demo_basket", format = "basket", sep=",", skip = 1,  rm.duplicates = TRUE)
inspect(tr)
rules <- apriori(tr, parameter= list(supp=0.6, conf=0.8))
inspect(rules)
install.packages('caret')
library('klar')
library('caret')
library('caret')
install.packages('pbkrtest')
install.packages("pbkrtest")
library('klar')
library('caret')
install.packages('klar')
install.packages('klaR')
library('klaR')
library('caret')
x = iris
x
months <- rep(1:12,3)
months <- rep(1:12,3)
months
months <- rep(1:12,2)
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,1,1,2,3,4,5,6,6,5,4,3,2,1)
cbind(months,deaths)
sum(deaths[1:12])
sum(deaths[7:18])
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,3,1,2,3,4,5,6,6,5,4,3,2,1)
cbind(months,deaths)
sum(deaths[1:12])
sum(deaths[1:12])
sum(deaths[7:18])
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,3,1,2,3,5,5,6,6,5,4,3,2,1)
cbind(months,deaths)
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,3,1,2,3,5,5,6,6,5,4,3,2,1)
sum(deaths[1:12])
sum(deaths[7:18])
mm<-260;mn<-1000;nn<-400
mm<-260;mn<-1000;nn<-400
fmm<-(mm/(mm+mn+nn));fmn<-(mn/(mm+mn+nn));fnn<-(nn/(mm+mn+nn))
p<-fmm+(.5*fmn);q<-fnn+(.5*fmn)
p2<-p^2;twopq<-2*p*q;q2<-q^2
p<-0.65;q<-0.35
fdomPhen<- p^2 + 2*p*q
domPhen<-190/1000
recPhen<-810/1000
q2<-recPhen
domPhen<-190/1000
recPhen<-810/1000
q2<-recPhen
q<-sqrt(q2);p<-1-q
twopq<-2*p*q;p2<-p^2
domPhen<-190/1000
recPhen<-810/1000
q2<-recPhen
q<-sqrt(q2);p<-1-q
twopq<-2*p*q;p2<-p^2
p<-0.95;q<-0.05
p2<-p^2;twopq<-2*p*q;q2<-q^2
flat<-p2*100;mod<-twopq*100;fizzy<-q2*100
fizzy<-p2*100;mod<-twopq*100;flat<-q2*100
eFiz<-fizzy*2000;eMod<-mod*2000;eFlat<-flat*2000
p<-0.95;q<-0.05
p2<-p^2;twopq<-2*p*q;q2<-q^2
fizzy<-p2*100;mod<-twopq*100;flat<-q2*100
## b ## 1 point
oFiz<-1000;oMod<-100;oFlat<-900
expected<-c(fizzy<-p2*100;mod<-twopq*100;flat<-q2*100)
exp<-c(fizzy,mod,flat)
obs<-c(oFiz,oMod,oFlat)
sum((((obs-exp)^2)/obs))
chi2<-sum((((obs-exp)^2)/obs))
exp
obs
fizzy<-p2*100;mod<-twopq*100;flat<-q2*100
eFiz<-p2*2000;eMod<-twopq*2000;eFlat<-q2*2000
exp<-c(eFiz,eMod,eFlat)
obs<-c(oFiz,oMod,oFlat)
chi2<-sum((((obs-exp)^2)/obs))
chi2<-sum((((obs-exp)^2)/exp))
obs
exp
fmm<-.25;fmn<-.60;fnn<-.15
fmm<-.25;fmn<-.60;fnn<-.15
p<-fmm + (.5*fmn); q<-fnn + (.5*fmn)
obs<-c(fmm*3000,fmn*3000,fnn*3000)
p2<-p^2;twopq<-2*p*q;q2<-q^2
exp<-c(p2*3000,2pq*3000,q2*3000)
exp<-c(p2*3000,twopq*3000,q2*3000)
chi2<-sum((((obs-exp)^2)/exp))
sQQ<-20;sQR<-35;sRR<-45
rQQ<-30;rQR<-65;rRR<-5
library(ggplot2)
?mpg
data <- mpg
mpg
data
qplot(disp,hwy,data=mpg)
qplot(disp;,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color = class)
qplot(displ,hwy,data=mpg,size= class)
qplot(displ,hwy,data=mpg,size= class, color = class)
qplot(displ,hwy,data=mpg,size= class, color = class, shape = class)
qplot(displ,hwy,data=mpg,size= class, color = class, alpha = class)
qplot(displ,hwy,data=mpg, color = class, alpha = class)
qplot(displ,hwy,data=mpg, color = class, alpha = class + facet_grid(.~cyl))
qplot(displ,hwy,data=mpg) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg = color = class) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(.~drv)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_wrap(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(drv~cyl)
summary(iris)
qplot(Sepal.Length,Sepal.Width, data = iris, color = Species)
qplot(Sepal.Length,Sepal.Width, data = iris, color = Species)+ facet_grid(Petal.Length~Petal.Width)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth')
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(class)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth', geom= 'point') + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'point', ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth', ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth' ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = ('point','smooth') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','smooth') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','boxplot') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(reorder(class,hwy),class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(class,hwy), geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(hwy,class), geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(hwy,class), geom = 'boxplot' )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(mpg$hwy,mpg$class), geom = 'boxplot' )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
?reorder
qplot(reorder(hwy, FUN = median),class,hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = median),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = mean),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,-hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(hwy,data=mpg,binwidth = 1)
qplot(hwy,data=mpg,binwidth = 2)
qplot(hwy,data=mpg,binwidth = 1)
qplot(carat, data = diamonds)
qplot(depth, data = diamonds)
qplot(depth, data = diamonds, binwidth = .1)
qplot(depth, data = diamonds, binwidth = .2)
qplot(depth, data = diamonds, binwidth = .2,color = cut)
qplot(depth, data = diamonds, binwidth = .2,fill = cut)
qplot(depth, data = diamonds, binwidth = .2,color = 'blue')
qplot(depth, data = diamonds, binwidth = .2,color = i('blue'))
qplot(depth, data = diamonds, binwidth = .2,color = I('blue'))
qplot(depth, data = diamonds, binwidth = .2,color = I('green'))
qplot(depth, data = diamonds, binwidth = .2,color = I('green'),fill = I('red'))
qplot(depth, data = diamonds, binwidth = .2,color = I('white'),fill = I('black'))
qplot(depth, data = diamonds, binwidth = .2,color = I('black'),fill = I('white'))
qplot(data = economics, aes(date,unemploy)) + geom_line()
economics
qplot(data = economics, aes(x=date,y=unemploy)) + geom_line()
names(economics)
summary(economics)
qplot(economics, x=date,y=unemploy)
qplot(data=economics, x=date,y=unemploy)
qplot(data=economics, x=date,y=unemploy) + geom_line()
getwd()
pl<-qplot(data=economics, x=date,y=unemploy) + geom_line()
ggsave('Desktop/plot.pdf', plot= pl)
summary(diamonds)
ggplot(data = diamonds, aes(x = color)) + geom_bar(color = cut)
ggplot(data = diamonds, x=color + geom_bar(color = cut)
ggplot(data = diamonds, x=color) + geom_bar(color = cut)
ggplot(data = diamonds, x=color) + geom_bar(color = cut)
qplot(x = color, data = diamonds)
qplot(x = color, data = diamonds, color = cut)
qplot(x = color, data = diamonds, color = cut, position = 'stack')
qplot(x = color, data = diamonds, color = cut, position = 'dodge')
qplot(x = color, data = diamonds, color = cut) + position_dodge()
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='stack')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='identity')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='fill')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position=c('fill','dodge'))
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
install.packages('plotly')
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
(gg <- ggplotly(p))
gg
ggplotly(p)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity))) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
ggplotly(p)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
library(ggplot2)
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
names(diamonds)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = depth)
setwd(dir='Desktop/Spring 2016/Neander_Trauma/')
df = read.csv('Data/NEISS/sport_category_final.csv')
head(df)
table(df$body_part,df$prod1)
table(df$prod1,df$body_part)
orig_table = table(df$prod1,df$body_part)
tableMatix<-as.data.frame.matrix(orig_table)
head(tableMatrix)
df <- read.csv('Data/NEISS/sport_category_final.csv')
orig_table <- table(df$prod1,df$body_part)
tableMatrix<-as.data.frame.matrix(orig_table)
head(tableMatrix)
tableMatix$ankle + tableMatrix$back
df <- read.csv('Data/NEISS/sport_category_final.csv')
# create a contigency table
orig_table <- table(df$prod1,df$body_part)
# create a datafame from the contigency table (at least one that is intuitive)
tm<-as.data.frame.matrix(orig_table)
head_neck <- tm$face + tm$neck + tm$head
shoulder_arm <- tm$`upper arm` + tm$`lower arm` + tm$shoulder + tm$elbow
hand <- tm$hand + tm$finger + tm$wrist
pelvis <- tm$`pubic region` + tm$hip
leg <- tm$knee + tm$`lower leg` + tm$`upper leg`
foot <- tm$foot + tm$toe + tm$ankle
trunk <- tm$`upper trunk` + tm$back
tm
tm.index
rownames(tm)
activity <- rownames(tm)
cbind(activity,head_neck,shoulder_arm,hand,pelvis,leg,foot,trunk)
final<-as.data.frame(cbind(activity,head_neck,shoulder_arm,hand,pelvis,leg,foot,trunk))
head(final)
table(final)
chisq.test(final)
rownames(final)<-final$activity
chisq.test(final)
colnames(final)
final
final <-rownames(final)<-final$activity
final
final<-as.data.frame(cbind(activity,head_neck,shoulder_arm,hand,pelvis,leg,foot,trunk))
final<-as.data.frame(cbind(head_neck,shoulder_arm,hand,pelvis,leg,foot,trunk))
rownames(final)<-rownames(tm)
final
chisq.test(final)
chisq.test(final[2,],final[3,])
chisq.test(final[,2],final[,3])
final[2,]
chisq.test(final[2,],final[3,])
n<-rbind(final[2,],final[3,])
n
chisq.test(n)
for( row in final){
new<-rbind(final[2,],final[row,])
print(chisq.test(new))
}
for( row in final){
new<-rbind(final[2,],final[row+1,])
print(chisq.test(new))
}
final[1,]
for( row in final){
new<-rbind(final[1,],final[row,])
print(chisq.test(new))
}
for( row in final){
new<-rbind(final[1,],final[row,])
new
}
new
for( row in final){
chisq.test(rbind(final[1,],final[row,]))
}
library(plyr)
combos <- combn(ncol(final),2)
combos
combos <- combn(nrow(final),2)
combos
adply(combos, 2, function(x) {
test <- chisq.test(Dat[, x[1]], Dat[, x[2]])
out <- data.frame("Row" = colnames(Dat)[x[1]]
, "Column" = colnames(Dat[x[2]])
, "Chi.Square" = round(test$statistic,3)
,  "df"= test$parameter
,  "p.value" = round(test$p.value, 3)
)
return(out)
})
adply(combos, 2, function(x) {
test <- chisq.test(final[, x[1]], final[, x[2]])
out <- data.frame("Row" = colnames(Dat)[x[1]]
, "Column" = colnames(Dat[x[2]])
, "Chi.Square" = round(test$statistic,3)
,  "df"= test$parameter
,  "p.value" = round(test$p.value, 3)
)
return(out)
})
2 * #
)
?chisq.test
neander_tot<-c(8,4,7,1,1,3,3)
chisq.test(neander_tot,final[1,])
mean(2,3,5,7,8,9,9,10)
mean(c(2,3,5,7,8,9,9,10))
apply(final,chisq.test(neander_tot))
apply(final,FUN =chisq.test(neander_tot))
neander_tot
t(apply(final,1,function(x)
with(chisq.test(x[1:2],p=x[3:4]),c(statistic,p.value=p.value))))
t(apply(final,0,fucntion(x)
with(mean(x))))
t(apply(final,0,mean)
)
head(df[2:5])
head(final[,2:5])
head(final[,4:7])
head(final[,6:10])
head(final[,6:10])
head(final[,6:11])
head(final)
for (row in final){
print(row)
}
for (row in final){
print(row) +2
}
for (row in final){
print(row)
}
apply(final,1,mean)
apply(final,1,function(x) {
ch <- chisq.test(x)
c(unname(ch$statistic), ch$p.value)}))
apply(final,1,function(x) {
ch <- chisq.test(x)
c(unname(ch$statistic), ch$p.value)})
t(apply(final,1,function(x) {
ch <- chisq.test(x)
c(unname(ch$statistic), ch$p.value)}))
t(apply(final,1,function(x) {
ch <- chisq.test(x,neander_tot)
c(unname(ch$statistic), ch$p.value)}))
t(apply(final,1,function(x) {
ch <- chisq.test(neander_tot,x)
c(unname(ch$statistic), ch$p.value)}))
n<-rbind(neander_tot,final[3,])
chisq.test(n)
t(apply(final,1,function(x) {
new<- cbind(neander_tot,x)
ch <- chisq.test(new)
c(unname(ch$statistic), ch$p.value)}))
chisq.test(n)
sqrt((135.660631/42))
(2-1)*(7-1)
6*7
135.660631/42
sqrt(3.230015)
